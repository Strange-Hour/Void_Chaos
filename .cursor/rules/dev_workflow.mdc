---
description: Guide for using meta-development script (scripts/dev.js) to manage task-driven development workflows
globs: **/*
alwaysApply: true
---

# Development Workflow Guide

## Task Management Commands

- **Global CLI Commands**
  - Task Master now provides a global CLI through the `task-master` command
  - All functionality from `scripts/dev.js` is available through this interface
  - Install globally with `npm install -g claude-task-master` or use locally via `npx`
  - Use `task-master <command>` instead of `node scripts/dev.js <command>`
  - Examples:
    - `task-master list` instead of `node scripts/dev.js list`
    - `task-master next` instead of `node scripts/dev.js next`
    - `task-master expand --id=3` instead of `node scripts/dev.js expand --id=3`
  - All commands accept the same options as their script equivalents
  - The CLI provides additional commands like `task-master init` for project setup

## Development Process

1. **Project Initialization**
   - Start new projects by running `task-master init`
   - Or use `task-master parse-prd --input=<prd-file.txt>` to generate initial tasks.json
   - Begin coding sessions with `task-master list` to see current tasks

2. **Task Selection and Analysis**
   - Analyze task complexity with `task-master analyze-complexity --research`
   - Select tasks based on dependencies and priority
   - View task details using `task-master show <id>`
   - Break down complex tasks using `task-master expand --id=<id>`

3. **Implementation**
   - Follow task details and project standards
   - Add/update tests
   - Run test suite
   - Verify functionality

4. **Documentation**
   - Check affected directories for README.md files
   - Create or update documentation following [documentation.mdc](mdc:.cursor/rules/documentation.mdc)
   - Add change log entries
   - Update examples
   - Verify documentation accuracy

5. **Quality Assurance**
   - Run tests
   - Check code coverage
   - Verify documentation
   - Review changes

6. **Task Completion**
   ```typescript
   // ✅ DO: Complete all requirements including documentation
   task.setStatus('done', {
     documentation: {
       updated: true,
       files: ['src/feature/README.md'],
       changes: ['Added new component docs', 'Updated examples']
     }
   });

   // ❌ DON'T: Mark task as done without documentation
   task.setStatus('done'); // Missing documentation updates
   ```

## Documentation Requirements

Each task completion MUST include documentation updates:

1. **Directory Documentation**
   - Check for README.md in affected directories
   - Create if missing using template
   - Update existing documentation
   - Add change log entries

2. **Documentation Checklist**
   ```markdown
   - [ ] README.md exists in affected directories
   - [ ] New features/changes documented
   - [ ] Examples updated
   - [ ] Change log updated
   - [ ] Links and references verified
   ```

3. **Change Log Entry Format**
   ```markdown
   ### [YYYY-MM-DD] - Task #123
   - Added: New features or components
   - Changed: Modified functionality
   - Fixed: Bug fixes
   - Removed: Deprecated features
   - Migration: Required steps
   ```

4. **Verification Steps**
   - Run documentation validation
   - Check example code
   - Verify formatting
   - Review for completeness

## Task Management Features

### Task Complexity Analysis
- Run `task-master analyze-complexity --research` for comprehensive analysis
- Review complexity report in scripts/task-complexity-report.json
- Focus on tasks with highest complexity scores (8-10)
- Use analysis results to determine subtask allocation

### Task Breakdown Process
- Use `task-master expand --id=<id>` for tasks with complexity analysis
- Add `--research` flag for research-backed expansion
- Use `--prompt="<context>"` for additional context
- Review and adjust generated subtasks as needed

### Implementation Drift Handling
- When implementation differs from planned approach
- When future tasks need modification
- When new dependencies emerge
- Use `task-master update --from=<id> --prompt="<explanation>"`

### Task Status Management
- Use 'pending' for tasks ready to work on
- Use 'done' for completed and verified tasks
- Use 'deferred' for postponed tasks
- Add custom status values as needed

## Command Reference

### parse-prd
```bash
task-master parse-prd --input=<prd-file.txt>
```
- Generates tasks.json from PRD document
- Will overwrite existing tasks.json

### update
```bash
task-master update --from=<id> --prompt="<prompt>"
```
- Updates tasks based on implementation changes
- Only affects non-completed tasks

### generate
```bash
task-master generate [--file=<path>] [--output=<dir>]
```
- Generates task files from tasks.json
- Creates tasks/ directory if needed

### set-status
```bash
task-master set-status --id=<id> --status=<status>
```
- Updates task status
- Requires documentation for 'done' status

### list
```bash
task-master list [--status=<status>] [--with-subtasks]
```
- Shows task overview
- Filters available by status

### expand
```bash
task-master expand --id=<id> [--research] [--prompt="<context>"]
```
- Breaks down tasks into subtasks
- Supports research-backed expansion

### analyze-complexity
```bash
task-master analyze-complexity [--research]
```
- Analyzes task complexity
- Generates recommendations

### clear-subtasks
```bash
task-master clear-subtasks --id=<id>
```
- Removes existing subtasks
- Allows task regeneration

## Task Structure

- **id**: Unique identifier
- **title**: Brief description
- **status**: Current state
- **dependencies**: Required tasks
- **priority**: Importance level
- **details**: Implementation notes
- **testStrategy**: Verification approach
- **documentation**: Documentation requirements

## Environment Configuration

Required environment variables:
- ANTHROPIC_API_KEY
- MODEL (default: "claude-3-7-sonnet-20250219")
- MAX_TOKENS (default: "4000")
- TEMPERATURE (default: "0.7")
- Other optional configurations as needed

## Best Practices

1. **Task Management**
   - Keep tasks focused and atomic
   - Maintain clear dependencies
   - Update documentation continuously
   - Use research-backed expansion for complex tasks

2. **Documentation**
   - Update docs during implementation
   - Keep examples current
   - Document breaking changes
   - Maintain change logs

3. **Quality Assurance**
   - Run tests before completion
   - Verify documentation
   - Check dependencies
   - Review changes

4. **Code Organization**
   - Follow project structure
   - Maintain clean architecture
   - Document design decisions
   - Keep modules focused
